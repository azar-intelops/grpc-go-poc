package daos

import (
	"github.com/{{.UserName}}/{{.RepositoryName}}/{{.NodeName}}/pkg/grpc/server/models"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

var {{.ResourceNamePlural}} []models.{{.ResourceName}}

type {{.ResourceName}}Dao struct {}

func ({{.ResourceNameSingular}}Dao *{{.ResourceName}}Dao) Create{{.ResourceName}}({{.ResourceNameSingular}} models.{{.ResourceName}}) error {
	{{.ResourceNamePlural}} = append({{.ResourceNamePlural}}, {{.ResourceNameSingular}})
	return nil
}

func ({{.ResourceNameSingular}}Dao *{{.ResourceName}}Dao) Get{{.ResourceName}}(id string) (models.{{.ResourceName}}, error) {
    if id == "" {
		return models.{{.ResourceName}}{}, status.Error(codes.InvalidArgument, "id can't be empty")
	}

	for _, {{.ResourceNameSingular}} := range {{.ResourceNamePlural}} {
		if {{.ResourceNameSingular}}.Id == id {
			return {{.ResourceNameSingular}}, nil
		}
	}

	return models.{{.ResourceName}}{}, status.Error(codes.Internal,"something went wrong")
}

func ({{.ResourceNameSingular}}Dao *{{.ResourceName}}Dao) Update{{.ResourceName}}(id string, {{.ResourceNameSingular}} models.{{.ResourceName}}) error {
	if id == "" {
		return status.Error(codes.InvalidArgument, "id can't be empty")
	}

	for idx, value := range {{.ResourceNamePlural}} {
		if value.Id == id {
			{{.ResourceNamePlural}}[idx] = {{.ResourceNameSingular}}
			return nil
		}
	}
	return status.Error(codes.Internal, "something went wrong")
}

func ({{.ResourceNameSingular}}Dao *{{.ResourceName}}Dao) Delete{{.ResourceName}}(id string) error {
	if id == "" {
		return status.Error(codes.InvalidArgument, "id can't be empty")
	}
	for idx, {{.ResourceNameSingular}} := range {{.ResourceNamePlural}} {
		if {{.ResourceNameSingular}}.Id == id {
			{{.ResourceNamePlural}} = append({{.ResourceNamePlural}}[:idx], {{.ResourceNamePlural}}[idx+1:]...)
			return nil
		}
	}
	return status.Error(codes.Internal, "something went wrong")
}

func ({{.ResourceNameSingular}}Dao *{{.ResourceName}}Dao) List{{.ResourceName}}s() ([]models.{{.ResourceName}}, error) {
	return {{.ResourceNamePlural}}, nil
}
